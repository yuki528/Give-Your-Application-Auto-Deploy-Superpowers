version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  install_awscli:
    description: Install AWS cli
    steps:
      - run:
          name: Install AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ./frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ./backend
             npm install
             npm run build
             cp .env dist/.env
             pwd && ls -al

      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
           keys: [frontend-build-cache]
      - run:
          name: Test frontend
          command: |
             cd ./frontend
             npm install
             npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout 
      - restore_cache:
          keys: [backend-build-cache]
      
      - run:
          name: Test backend
          command: |
             cd ./backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout 
      - restore_cache:
          keys: [frontend-build-cache]
      
      - run:
          name: Scan frontend
          command: |
             cd ./frontend
             npm install
             npm  audit fix --audit-level=critical --force
             
             

      - slack/notify:
           event: fail
           template: basic_fail_2

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Scan backend
          command: |
              cd ./backend
              npm install
              npm  audit fix --audit-level=critical --force
              
      - slack/notify:
            event: fail
            template: basic_fail_1


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout 
      - run: 
          name: Install tar and zip utilities
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
       
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      
      - run:
     #     name: Add back-end ip to ansible inventory
          command: |
            # Your code here
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      
      - run:
          name: save the new back-end url to memory using kvdb.io
          command: |
            export backend_url=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${backend_url}:3030"
            echo "API_URL = ${API_URL}"
            curl https://kvdb.io/GRkThmKJMbL9eTWpBLPotj/backend_url  -d "${API_URL}"

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
        
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout 

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "d2:f5:3c:5a:b8:50:b1:e1:ea:a2:4c:9a:27:9f:d3:0b"
      # attach workspace
      - attach_workspace:
          at:  ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update --no-cache tar gzip ansible aws-cli

      - run:
          name: Configure server
          command: |
            # Your code here
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml


# Here's where you will add some code to rollback on failure
      - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout 
      
      - run:
           name: install deps
           command: |
              apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            npm run migrations >> migrations_dump.txt
            ls -la
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            echo "has been done successfully" > ./migration_status.txt
            pwd && ls -al
            if grep -q "has been done successfully" ./migration_status.txt 
            then 
              echo "has been done successfully"
              curl --insecure https://kvdb.io/5rTNVEHdZwSn32ApX5E6D5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "has failed"
              curl --insecure https://kvdb.io/5rTNVEHdZwSn32ApX5E6D5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
           

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
             export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text 
            )
            API_URL=$(curl --insecure  https://kvdb.io/GRkThmKJMbL9eTWpBLPotj/backend_url)
            echo $API_URL
            echo "${API_URL}"
            echo "NODE_ENV=production" >> frontend/.env
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            # your code here
            npm install
            npm run build
            ls -l
            ws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure      
    
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIE
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
           fingerprints:
             - 'd2:f5:3c:5a:b8:50:b1:e1:ea:a2:4c:9a:27:9f:d3:0b'
      # attach workspace
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible rsync 
            apk add curl
            pip3 install awscli
      
            
      - run:
          name: Deploy backend
          command: |
            # your code here
            ls /root
            ls /root/project/backend/
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml


      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout 

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache curl aws-cli tar gzip nodejs npm

      - attach_workspace:
          at: /root

      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            ls 
            pwd
            export backend_url=$(curl --insecure  https://kvdb.io/GRkThmKJMbL9eTWpBLPotj/backend_url)
            echo $backend_url
            echo "$backend_url/api/status"
            curl "$backend_url/api/status"
            if curl "$backend_url/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            # your code here 
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              # This is the intentional error, if "Welcome" is indeed in the response this step will exit with exit code 1
              exit 0
            else
              exit 1
            fi

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout 

      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install tar gzip npm nodejs -y
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here 
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
            echo OldWorkflowID=${OldWorkflowID}
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        #  filters:
         #   branches:
         #     only: [dev-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
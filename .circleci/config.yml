version: 2.1

orbs:
  slack: circleci/slack@4.12.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID}'

commands:
  create-dotenv-file:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflow_id: 
        type: string  
    steps:
      - run:
          name: Echo workflow ID that is going be be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run :
           name: Destroy backend stack
           when: on_fail
           command: |
            # Your code here
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflowID >> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
      - run:
          name: Destroy frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
   # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ./frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ./backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
           keys: [frontend-build-cache]
      - run:
          name: Test frontend
          command: |
             cd ./frontend
             npm install
             npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout 
      - restore_cache:
          keys: [backend-build-cache]
      
      - run:
          name: Test backend
          command: |
             cd ./backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout 
      - restore_cache:
          keys: [frontend-build-cache]
      
      - run:
          name: Scan frontend
          command: |
             cd ./frontend
             npm install
             npm  audit fix --audit-level=critical --force
             
             

      - slack/notify:
           event: fail
           template: basic_fail_2

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Scan backend
          command: |
              cd ./backend
              npm install
              npm  audit fix --audit-level=critical --force
              
      - slack/notify:
            event: fail
            template: basic_fail_1


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout 
      - run: 
          name: Install tar and zip utilities
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
       
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      
      - run:
     #     name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      #- destroy-environment:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout 

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "d2:f5:3c:5a:b8:50:b1:e1:ea:a2:4c:9a:27:9f:d3:0b"
      # attach workspace
      - attach_workspace:
          at:  ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update --no-cache tar gzip ansible aws-cli
      
      - create-dotenv-file

      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=fals
            ansible-playbook -i inventory.txt configure-server.yml

      - persist_to_workspace:
           root: ~/
           paths:
             - project/backend

# Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout 
      
      - run:
           name: install deps
           command: |
              apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: [backend-build]

      - create-dotenv-file

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            npm run migrations >> migrations_dump.txt
            ls -la
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "migrations" ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/93J39AT6mgGB1ntfFXxRU2/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment: 
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
           

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="https://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=https://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
    
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
           fingerprints:
             - 'd2:f5:3c:5a:b8:50:b1:e1:ea:a2:4c:9a:27:9f:d3:0b'
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm tree aws-cli ansibl
            
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml


      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         # filters:
          #  branches:
            #  only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      #- smoke-test:
       #   requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
       #   requires: [smoke-test]
     # - cleanup:
      #    requires: [cloudfront-update]